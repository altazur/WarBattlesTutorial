function init(self)
	self.point_reached = true
	self.way_point = nil
	
	self.dir = vmath.vector3()

	self.timer = 1
	self.fire_rate = 1 -- Tank can fire once in n seconds
	self.firing = false
	
	self.current_anim_id = nil
	
	self.speed = 50
	
	self.max_x = 640
	self.max_y = 370
	
	self.see_player = false
	self.player_pos = nil
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function update_animation(self)
	local id = "tank_down" -- New animation ID

	if self.dir.x < 0 then
		id = hash("tank_left")
	elseif self.dir.x > 0 then
		id = hash("tank_right")
	elseif self.dir.y > 0 then
		id = hash("tank_up")
	elseif self.dir.y < 0 then
		id = hash("tank_down")
	end
	-- PLaying animation if it's changed
	if id ~= self.current_animation_id then
		msg.post("#sprite", "play_animation", {id = hash(id)})
		self.current_animation_id = id
	end
end

function update(self, dt)
	-- Ticking the seconds after the shot
	if self.timer < 1 then
		self.timer = self.timer + dt
	end
	-- If point reached yet pick random point and move to it
	if  self.point_reached and not self.see_player then
		self.firing = false
		self.way_point = vmath.vector3(math.random(0, self.max_x), math.random(0, self.max_y), 0)
		self.point_reached = false
	end
	-- Chase player if player is seen
	if self.see_player then
		if self.timer >= self.fire_rate then
			self.firing = true
		end
		self.way_point = self.player_pos
	end

	-- Move tank towards the point
	local p = go.get_position()
	if math.ceil(p.x) < math.ceil(self.way_point.x) then
		self.dir.x = 1
	elseif math.ceil(p.x) > math.ceil(self.way_point.x) then 
		self.dir.x = -1
	else
		self.dir.x = 0 -- Could be unnecesary
	end
	
	if math.ceil(p.y) < math.ceil(self.way_point.y) then
		self.dir.y = 1
	elseif math.ceil(p.y) > math.ceil(self.way_point.y) then 
		self.dir.y = -1
	else self.dir.y = 0 -- Could be unnecesary
	end

	self.dir.z = 0 -- Fix for tank frozen after reaching player point
	
	self.dir = vmath.normalize(self.dir)
	p = p + self.dir * self.speed * dt
	go.set_position(p)

	update_animation(self)

	--look for the new point of previous was reached
	local p = go.get_position()
	if math.ceil(p.x) == math.ceil(self.way_point.x) then
		if math.ceil(p.y) == math.ceil(self.way_point.y) then
			self.point_reached = true
		end
	end

	--Firing at player
	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = { dir = self.dir }
		factory.create("#rocket_factory", nil, rot, props)
		sound.play("#fire_snd")
		self.timer = 0
	end
	
	self.see_player = false
	self.firing = false
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		self.see_player = true
		self.player_pos = go.get_position(message.other_id)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
